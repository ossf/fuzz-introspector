diff --git a/infra/base-images/base-builder/Dockerfile b/infra/base-images/base-builder/Dockerfile
index 12c08499..9808589b 100644
--- a/infra/base-images/base-builder/Dockerfile
+++ b/infra/base-images/base-builder/Dockerfile
@@ -162,5 +162,9 @@ COPY cargo compile compile_afl compile_libfuzzer compile_honggfuzz \
 COPY llvmsymbol.diff $SRC
 COPY detect_repo.py /opt/cifuzz/
 COPY bazel.bazelrc /root/.bazelrc
+RUN rm -rf /fuzz-introspector/src
+RUN rm -rf /fuzz-introspector/frontends
+COPY src /fuzz-introspector/src
+COPY frontends /fuzz-introspector/frontends
 
 CMD ["compile"]
diff --git a/infra/base-images/base-builder/compile b/infra/base-images/base-builder/compile
index e82b8153..b0e3688e 100755
--- a/infra/base-images/base-builder/compile
+++ b/infra/base-images/base-builder/compile
@@ -16,7 +16,7 @@
 ################################################################################
 
 echo "---------------------------------------------------------------"
-
+echo "Checking with sanitizer $SANITIZER"
 # This is a temporary fix: fall back to LLVM14's old pass manager
 if [ -n "${OLD_LLVMPASS-}" ]; then
   export SANITIZER_FLAGS_introspector=$(echo $SANITIZER_FLAGS_introspector | sed -r 's/-O0/-flegacy-pass-manager/')
@@ -27,8 +27,9 @@ if [ "$FUZZING_LANGUAGE" = "jvm" ]; then
     echo "ERROR: JVM projects can be fuzzed with libFuzzer or tested with wycheproof engines only."
     exit 1
   fi
-  if [ "$SANITIZER" != "address" ] && [ "$SANITIZER" != "coverage" ] && [ "$SANITIZER" != "undefined" ] && [ "$SANITIZER" != "none" ]; then
-    echo "ERROR: JVM projects can be fuzzed with AddressSanitizer or UndefinedBehaviorSanitizer only."
+  if [ "$SANITIZER" != "address" ] && [ "$SANITIZER" != "coverage" ] && [ "$SANITIZER" != "undefined" ] && [ "$SANITIZER" != "none" ] && [ "$SANITIZER" != "introspector" ]; then
+    echo "$SANITIZER"
+    echo "ERROR: JVM projects can be fuzzed with AddressSanitizer or UndefinedBehaviorSanitizer or introspector only."
     exit 1
   fi
   if [ "$ARCHITECTURE" != "x86_64" ]; then
@@ -251,6 +252,14 @@ if [ "$SANITIZER" = "introspector" ]; then
     REPORT_ARGS="$REPORT_ARGS --language=python"
     python3 /fuzz-introspector/src/main.py report $REPORT_ARGS
     cp -rf $SRC/inspector $OUT/inspector
+  elif [ "$FUZZING_LANGUAGE" = "jvm" ]; then
+    echo "GOING jvm route"
+    set -x
+    find $OUT/ -name "jacoco.xml" -exec cp {} $SRC/inspector/ \;
+    REPORT_ARGS="$REPORT_ARGS --target_dir=$SRC/inspector"
+    REPORT_ARGS="$REPORT_ARGS --language=jvm"
+    python3 /fuzz-introspector/src/main.py report $REPORT_ARGS
+    cp -rf $SRC/inspector $OUT/inspector
   else
     # C/C++
 
diff --git a/infra/base-images/base-clang/Dockerfile b/infra/base-images/base-clang/Dockerfile
index a4e23350..d734662f 100644
--- a/infra/base-images/base-clang/Dockerfile
+++ b/infra/base-images/base-clang/Dockerfile
@@ -45,6 +45,8 @@ RUN apt-get update && apt-get install -y git && \
 COPY checkout_build_install_llvm.sh /root/
 # Keep all steps in the same script to decrease the number of intermediate
 # layes in docker file.
+RUN rm -rf /fuzz-introspector
+COPY fuzz-introspector fuzz-introspector
 RUN /root/checkout_build_install_llvm.sh
 RUN rm /root/checkout_build_install_llvm.sh
 
diff --git a/infra/base-images/base-runner/Dockerfile b/infra/base-images/base-runner/Dockerfile
index bc034e19..929e3499 100755
--- a/infra/base-images/base-runner/Dockerfile
+++ b/infra/base-images/base-runner/Dockerfile
@@ -19,7 +19,7 @@
 FROM gcr.io/oss-fuzz-base/base-image as temp-runner-binary-builder
 
 RUN apt-get update && apt-get install -y cargo
-RUN cargo install rustfilt
+#RUN cargo install rustfilt
 
 # Using multi-stage build to copy some LLVM binaries needed in the runner image.
 FROM gcr.io/oss-fuzz-base/base-clang AS base-clang
@@ -27,7 +27,7 @@ FROM gcr.io/oss-fuzz-base/base-clang AS base-clang
 # Real image that will be used later.
 FROM gcr.io/oss-fuzz-base/base-image
 
-COPY --from=temp-runner-binary-builder /root/.cargo/bin/rustfilt /usr/local/bin
+#COPY --from=temp-runner-binary-builder /root/.cargo/bin/rustfilt /usr/local/bin
 
 # Copy the binaries needed for code coverage and crash symbolization.
 COPY --from=base-clang /usr/local/bin/llvm-cov \
diff --git a/projects/javassist/build.sh b/projects/javassist/build.sh
index b4890d06..5c5e7fc7 100644
--- a/projects/javassist/build.sh
+++ b/projects/javassist/build.sh
@@ -23,7 +23,7 @@ mv ./src/test ./src/java
 mkdir ./src/test
 mv ./src/java ./src/test/java
 
-MAVEN_ARGS="-Djavac.src.version=15 -Djavac.target.version=15 -DskipTests"
+MAVEN_ARGS="-Djavac.src.version=15 -Djavac.target.version=15 -DskipTests --quiet"
 $MVN package org.apache.maven.plugins:maven-shade-plugin:3.2.4:shade $MAVEN_ARGS
 CURRENT_VERSION=$($MVN org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate \
  -Dexpression=project.version -q -DforceStdout)
