# Copyright 2023 Fuzz Introspector Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

MAX_FUZZERS_PER_PROJECT = 400
MAX_TARGET_PER_PROJECT_HEURISTIC = 1000
MAX_THREADS = 4

BATCH_SIZE_BEFORE_DOCKER_CLEAN = 40

JDK_URL = {
    "jdk15":
    "https://download.java.net/java/GA/jdk15.0.2/0d1cfde4252546c6931946de8db48ee2/7/GPL/openjdk-15.0.2_linux-x64_bin.tar.gz",
    "jdk21":
    "https://download.java.net/java/GA/jdk21/fd2272bbf8e04c3dbaee13770090416c/35/GPL/openjdk-21_linux-x64_bin.tar.gz",
    "jdk20":
    "https://download.java.net/java/GA/jdk20/bdc68b4b9cbc4ebcb30745c85038d91d/36/GPL/openjdk-20_linux-x64_bin.tar.gz",
    "jdk19":
    "https://download.java.net/java/GA/jdk19/877d6127e982470ba2a7faa31cc93d04/36/GPL/openjdk-19_linux-x64_bin.tar.gz",
    "jdk18":
    "https://download.java.net/java/GA/jdk18/43f95e8614114aeaa8e8a5fcf20a682d/36/GPL/openjdk-18_linux-x64_bin.tar.gz",
    "jdk17":
    "https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_linux-x64_bin.tar.gz",
    "jdk16":
    "https://download.java.net/java/GA/jdk16/7863447f0ab643c585b9bdebf67c69db/36/GPL/openjdk-16_linux-x64_bin.tar.gz",
    "jdk14":
    "https://download.java.net/java/GA/jdk14/076bab302c7b4508975440c56f6cc26a/36/GPL/openjdk-14_linux-x64_bin.tar.gz",
    "jdk13":
    "https://download.java.net/java/GA/jdk13/5b8a42f3905b406298b72d750b6919f6/33/GPL/openjdk-13_linux-x64_bin.tar.gz",
    "jdk12":
    "https://download.java.net/java/GA/jdk12/33/GPL/openjdk-12_linux-x64_bin.tar.gz",
    "jdk11":
    "https://download.java.net/java/ga/jdk11/openjdk-11_linux-x64_bin.tar.gz",
    "jdk10":
    "https://download.java.net/java/GA/jdk10/10/binaries/openjdk-10_linux-x64_bin.tar.gz",
    "jdk9":
    "https://download.java.net/java/GA/jdk9/9/binaries/openjdk-9_linux-x64_bin.tar.gz",
    "jdk8":
    "https://download.java.net/openjdk/jdk8u43/ri/openjdk-8u43-linux-x64.tar.gz",
}

JDK_HOME = {
    "jdk15": "jdk-15.0.2",
    "jdk21": "jdk-21",
    "jdk20": "jdk-20",
    "jdk19": "jdk-19",
    "jdk18": "jdk-18",
    "jdk17": "jdk-17",
    "jdk16": "jdk-16",
    "jdk14": "jdk-14",
    "jdk13": "jdk-13",
    "jdk12": "jdk-12",
    "jdk11": "jdk-11",
    "jdk10": "jdk-10",
    "jdk9": "jdk-9",
    "jdk8": "java-se-8u43-ri",
}
ANT_PATH = "apache-ant-1.10.13/bin"
MAVEN_PATH = "apache-maven-3.6.3/bin"
GRADLE_HOME = "gradle-7.4.2"
GRADLE_PATH = f"{GRADLE_HOME}/bin"
PROTOC_PATH = "protoc/bin"

# This is an user-controlled options. If this is set to True, it will always
# search for all subclasses of a target class when the auto-fuzz generation
# handles object creation of the target class. Otherwise, the searching of
# subclasses will only happen when the the target class is not concrete.
SEARCH_SUBCLASS_FOR_OBJECT_CREATION = False

# These are user-controlled options. If any of them are set to True, the
# auto-fuzz generation process for java will ignore some targets methods
# which does not have much fuzzing value. Otherwise, those methods will
# be included in the generation result
# JAVA_IGNORE_GETTER_SETTER: All getters, setters and boolean checking methods.
# JAVA_IGNORE_PLAIN_METHOD: Methods without parameters.
# JAVA_IGNORE_TEST_METHOD: Methods that belongs to fuzzing engine or unit testing engine.
# JAVA_IGNORE_GENERAL_METHOD: Methods that are inherited from the Object class.
JAVA_IGNORE_GETTER_SETTER = True
JAVA_IGNORE_PLAIN_METHOD = True
JAVA_IGNORE_TEST_METHOD = True
JAVA_IGNORE_OBJECT_METHOD = True

# This is the list of files that are required for auto-fuzz to process for
# a specific language. All these files are downloaded at the beginning of the
# auto-fuzz process and will be reused by different stages of the auto-fuzz
# generation and result testing.
FILE_TO_PREPARE = {
    'java': {
        'ant':
        "https://dlcdn.apache.org//ant/binaries/apache-ant-1.10.13-bin.zip",
        'maven':
        "https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip",
        'gradle':
        "https://services.gradle.org/distributions/gradle-7.4.2-bin.zip",
        'protoc':
        "https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip"
    },
    'python': {}
}

# This is the list of result files generated by the static analysis
# which are then used for fuzzer target generation process.
STATIC_ANALYSIS_FILE = {
    'java': ['fuzzerLogFile-Fuzz.data', 'fuzzerLogFile-Fuzz.data.yaml'],
    'python': ['fuzzerLogFile-fuzz_1.data.yaml']
}

# This is the list of files generated from the project build and could
# be reused in a later stage without the need to rebuild the project.
# The properties in this list indicate what type of files are needed
# from the OSS-Fuzz out directory and where to store them in the base
# auto-fuzz directory for further use.
BUILD_FILE_PROPERTY = {
    'java': [
        {
            'src_file': '.jar',
            'dst_dir': 'build-jar'
        },
    ],
    'python': []
}

# Constant repository urls for different languages
git_repos = {
    'python': [
        'https://github.com/davidhalter/parso',
        #'https://github.com/py-pdf/pypdf',
        #'https://github.com/python-lz4/python-lz4',
        #'https://github.com/eliben/pycparser',
        #'https://github.com/derek73/python-nameparser',
        #'http://github.com/matthewwithanm/python-markdownify',
        #'https://github.com/dateutil/dateutil',
        #'https://github.com/mpdavis/python-jose',
        #'https://github.com/nvawda/bz2file',
        #'https://github.com/executablebooks/markdown-it-py'
    ],
    'java': [
        # 'https://github.com/eclipse-ee4j/angus-mail',
        #'https://github.com/jboss-javassist/javassist',
        'https://github.com/tukaani-project/xz-java'
    ]
}

# Benchmark directories name for different languages
benchmark = {
    'java': [
        'benchmark1', 'benchmark2', 'benchmark3', 'benchmark4', 'benchmark5',
        'benchmark6', 'benchmark7', 'benchmark8'
    ],
    'python': []
}

# List of expected method results for benchmarks of different languages
benchmark_target_method = {
    'java': {
        'benchmark1': [
            'public static java.lang.Boolean parseData(java.lang.String,java.lang.Integer,java.lang.Integer) throws autofuzz.benchmark.object.AutoFuzzException'
        ],
        'benchmark2': [
            'public static java.lang.Boolean parseData(java.lang.String,java.lang.Integer,java.lang.Integer) throws autofuzz.benchmark.object.AutoFuzzException'
        ],
        'benchmark3': [
            'public static java.lang.Boolean parseData(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException'
        ],
        'benchmark4': [
            'public static java.lang.Boolean parseData(java.lang.String,java.lang.Integer) throws autofuzz.benchmark.object.AutoFuzzException',
            'public static java.lang.Boolean parseData(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) throws autofuzz.benchmark.object.AutoFuzzException'
        ],
        'benchmark5': [
            'public void parseAlphabetic(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException',
            'public void parseInteger(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException',
            'public void parseFloat(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException'
        ],
        'benchmark6': [
            'public void parseData(java.lang.String[]) throws autofuzz.benchmark.object.AutoFuzzException'
        ],
        'benchmark7': [
            'public java.lang.Boolean processClass(java.lang.Class,java.lang.String,java.lang.Integer) throws autofuzz.benchmark.object.AutoFuzzException'
        ],
        'benchmark8': [
            'public void entry1(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException',
            'public void entry2(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException',
            'public void entry3(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException',
            'public void entry4(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException',
            'public void entry5(java.lang.String) throws autofuzz.benchmark.object.AutoFuzzException'
        ]
    },
    'python': {}
}
