# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
##########################################################################
%s
SUCCESS=false
BASEDIR=$(pwd)
for dir in $(ls -R)
do
  cd $BASEDIR
  if [[ $dir == *: ]]
  then
    dir=${dir%%*:}
    cd $dir
    if test -f "build.xml"
    then
      chmod +x $SRC/protoc/bin/protoc

      rm -rf $HOME/.gradle/caches/
      chmod +x ./gradlew

      EXCLUDE_SPOTLESS_CHECK=
      if ./gradlew tasks --all | grep -qw "^spotlessCheck"
      then
        EXCLUDE_SPOTLESS_CHECK="-x spotlessCheck "
      fi

      ./gradlew clean build -x test -x javadoc -x sources \
      $EXCLUDE_SPOTLESS_CHECK\
      -Porg.gradle.java.installations.auto-detect=false \
      -Porg.gradle.java.installations.auto-download=false \
      -Porg.gradle.java.installations.paths=$JAVA_HOME
      ./gradlew --stop

      SUCCESS=true 
      break
    fi
  fi
done

if [ "$SUCCESS" = false ]
then
  echo "Unknown project type"
  exit 127
fi


JARFILE_LIST=
for JARFILE in $(find ./  -name "*.jar")
do
  if [[ "$JARFILE" == *"target/"* ]] || [[ "$JARFILE" == *"build/"* ]] || [[ "$JARFILE" == *"dist/"* ]]
  then
    if [[ "$JARFILE" != *sources.jar ]] && [[ "$JARFILE" != *javadoc.jar ]] && [[ "$JARFILE" != *tests.jar ]]
    then
      cp $JARFILE $OUT/
      JARFILE_LIST="$JARFILE_LIST$(basename $JARFILE) "
    fi
  fi
done
%s
%s
JARFILE_LIST=
for JARFILE in `ls $SRC/build_jar/*.jar`
do
  cp $JARFILE $OUT/
  JARFILE_LIST="$JARFILE_LIST$(basename $JARFILE) "
done
%s

curr_dir=$(pwd)
rm -rf $OUT/jar_temp
mkdir $OUT/jar_temp
cd $OUT/jar_temp
for JARFILE in $JARFILE_LIST
do
  jar -xf $OUT/$JARFILE
done
cd $curr_dir

cp -r $JAVA_HOME $OUT/

# Retrieve apache-common-lang3 library
# This library provides method to translate primitive type arrays to
# their respective class object arrays to avoid compilation error.
wget -P $OUT/ https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar

BUILD_CLASSPATH=$JAZZER_API_PATH:$OUT/jar_temp:$OUT/commons-lang3-3.12.0.jar
RUNTIME_CLASSPATH=\$this_dir/jar_temp:\$this_dir/commons-lang3-3.12.0.jar:\$this_dir

for fuzzer in $(find $SRC -name 'Fuzz.java')
do
  fuzzer_basename=$(basename -s .java $fuzzer)
  $JAVA_HOME/bin/javac -cp $BUILD_CLASSPATH $fuzzer
  cp $SRC/$fuzzer_basename.class $OUT/

  # Create an execution wrapper that executes Jazzer with the correct arguments.
  echo "#!/bin/bash

  # LLVMFuzzerTestOneInput for fuzzer detection.
  this_dir=\$(dirname \"\$0\")
  if [[ \"\$@\" =~ (^| )-runs=[0-9]+($| ) ]]
  then
    mem_settings='-Xmx1900m:-Xss900k'
  else
    mem_settings='-Xmx2048m:-Xss1024k'
  fi

  export JAVA_HOME=\$this_dir/$(basename $JAVA_HOME)
  export LD_LIBRARY_PATH=\"\$JAVA_HOME/lib/server\":\$this_dir
  export PATH=\$JAVA_HOME/bin:\$PATH

  \$this_dir/jazzer_driver --agent_path=\$this_dir/jazzer_agent_deploy.jar \
  --cp=$RUNTIME_CLASSPATH \
  --target_class=$fuzzer_basename \
  --jvm_args=\"\$mem_settings\" \
  \$@" > $OUT/$fuzzer_basename

  chmod u+x $OUT/$fuzzer_basename
done
